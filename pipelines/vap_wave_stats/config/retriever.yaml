classname: tsdat.io.retrievers.StorageRetriever
parameters:
  fetch_parameters:
    # How far in time to look after the "end" timestamp (+), before the "begin"
    # timestamp (-), or both (none) to find filenames that contain needed data
    time_padding: -24h

  transformation_parameters:
    # Where the point lies in the coordinate bounds (CENTER, LEFT, RIGHT)
    alignment:
      time: CENTER

    # How far to look for the next available data point
    range:
      time: 120s

    # Width of the transformation
    width:
      time: 60s

coords:
  time:
    .*wave.*:
      name: time
  frequency:
    .*wave.*: 
      name: frequency

data_vars:
  lat:
    .*gps.*:
      name: lat
      data_converters:
        - classname: tsdat.transform.Interpolate
  lon:
    .*gps.*:
      name: lon
      data_converters:
        - classname: tsdat.transform.Interpolate

  wave_hs:
    .*wave.*: 
      name: wave_hs
  wave_te:
    .*wave.*: 
      name: wave_te
  wave_tp:
    .*wave.*: 
      name: wave_tp
  wave_ta:
    .*wave.*: 
      name: wave_ta
  wave_tz:
    .*wave.*: 
      name: wave_tz
  wave_dp:
    .*wave.*: 
      name: wave_dp
  wave_spread:
    .*wave.*: 
      name: wave_spread
  wave_energy_density:
    .*wave.*: 
      name: wave_energy_density
  wave_a1_value:
    .*wave.*: 
      name: wave_a1_value
  wave_b1_value:
    .*wave.*: 
      name: wave_b1_value
  wave_a2_value:
    .*wave.*: 
      name: wave_a2_value
  wave_b2_value:
    .*wave.*: 
      name: wave_b2_value
  wave_check_factor:
    .*wave.*: 
      name: wave_check_factor
